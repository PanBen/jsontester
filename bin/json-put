#!/usr/bin/env python

import sys,os
from jsontester.shell import Script

from jsontester.request import JsonRequest,response_code_text

script = Script(description='Test JSON PUT requests')
script.add_argument('-D','--data-from',help='Data to send in PUT request')
script.add_argument('-B','--browser',help='Browser for cookie stealing (firefox/chrome)')
script.add_argument('urls',nargs='*',help='URLs to send PUT requests')
args = script.parse_args()

if args.browser and args.browser not in ['chrome','firefox']:
    script.exit(1,'Invalid browser name')
request = JsonRequest(browser=args.browser)

if not args.data_from:
    script.exit(1,'PUT data to send is required argument')

if args.data_from=='-':
    script.log.debug('Reading PUT data from standard input')
    post_data = ''
    while True:
        l = sys.stdin.readline()
        if l=='': break
        post_data += l

elif os.path.isfile(args.data_from):
    script.log.debug('Reading PUT data from file')
    try:
        post_data = open(args.data_from,'r').read()
    except OSError,(ecode,emsg):
        script.exit(1,'Error reading PUT data from file %s: %s' % (args.data,emsg))

else:
    script.exit(1,'Could not parse PUT data from anywhere')

script.log.debug('PUT %d bytes:\n%s' % (len(post_data),post_data))
for url in args.urls:
    res = request.put(url,data=post_data)
    res_text = response_code_text(res.status_code)
    if res_text != 'ACCEPTED':
        script.error('RESPONSE CODE: %s\n' % res_text)
        script.error('ERROR updating JSON resource')
        script.error(res.content)

    else:
        script.error('RESPONSE CODE: %s\n' % res_text)
        script.message(res.content)

